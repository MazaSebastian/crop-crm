{"ast":null,"code":"// Simulación de base de datos de eventos\nconst mockEvents = {\n  'EVT-2024-001': {\n    code: 'EVT-2024-001',\n    clientName: 'María González',\n    eventType: 'wedding',\n    eventDate: '2024-12-15',\n    eventTime: '20:00',\n    guestCount: 150,\n    venue: 'Salón Principal'\n  },\n  'EVT-2024-002': {\n    code: 'EVT-2024-002',\n    clientName: 'Carlos Rodríguez',\n    eventType: 'birthday',\n    eventDate: '2024-11-20',\n    eventTime: '19:00',\n    guestCount: 80,\n    venue: 'Salón VIP'\n  },\n  'EVT-2024-003': {\n    code: 'EVT-2024-003',\n    clientName: 'Empresa TechCorp',\n    eventType: 'corporate',\n    eventDate: '2024-12-10',\n    eventTime: '18:30',\n    guestCount: 200,\n    venue: 'Salón Corporativo'\n  },\n  'EVT-2024-004': {\n    code: 'EVT-2024-004',\n    clientName: 'Ana Martínez',\n    eventType: 'quinceanera',\n    eventDate: '2024-11-25',\n    eventTime: '21:00',\n    guestCount: 120,\n    venue: 'Salón Principal'\n  },\n  'EVT-2024-005': {\n    code: 'EVT-2024-005',\n    clientName: 'Universidad Central',\n    eventType: 'graduation',\n    eventDate: '2024-12-05',\n    eventTime: '19:30',\n    guestCount: 300,\n    venue: 'Auditorio Principal'\n  }\n};\nexport class JanosService {\n  /**\n   * Verifica un código de evento en el sistema de Janos\n   * @param code - Código del evento a verificar\n   * @returns Promise con la información del evento\n   */\n  static async verifyEventCode(code) {\n    // Simular delay de red\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const event = mockEvents[code];\n    if (!event) {\n      throw new Error('Código de evento no encontrado en el sistema');\n    }\n    return event;\n  }\n\n  /**\n   * Obtiene todos los eventos disponibles (para testing)\n   * @returns Lista de códigos de eventos válidos\n   */\n  static getValidEventCodes() {\n    return Object.keys(mockEvents);\n  }\n\n  /**\n   * Simula el envío de la coordinación completada al sistema de Janos\n   * @param sessionData - Datos de la sesión de coordinación\n   * @returns Promise con confirmación\n   */\n  static async submitCoordination(sessionData) {\n    // Simular delay de red\n    await new Promise(resolve => setTimeout(resolve, 1500));\n\n    // Simular éxito en el 95% de los casos\n    const success = Math.random() > 0.05;\n    if (success) {\n      return {\n        success: true,\n        message: 'Coordinación enviada exitosamente al sistema de Janos'\n      };\n    } else {\n      throw new Error('Error al enviar la coordinación. Inténtalo de nuevo.');\n    }\n  }\n\n  /**\n   * Obtiene estadísticas de coordinaciones por tipo de evento\n   * @returns Estadísticas simuladas\n   */\n  static async getCoordinationStats() {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    return {\n      total: 156,\n      byType: {\n        wedding: 45,\n        birthday: 38,\n        corporate: 28,\n        quinceanera: 25,\n        graduation: 20\n      },\n      recent: 12 // Últimos 7 días\n    };\n  }\n}\n\n// Función helper para generar códigos de evento válidos para testing\nexport const generateTestEventCode = () => {\n  const codes = Object.keys(mockEvents);\n  return codes[Math.floor(Math.random() * codes.length)];\n};","map":{"version":3,"names":["mockEvents","code","clientName","eventType","eventDate","eventTime","guestCount","venue","JanosService","verifyEventCode","Promise","resolve","setTimeout","event","Error","getValidEventCodes","Object","keys","submitCoordination","sessionData","success","Math","random","message","getCoordinationStats","total","byType","wedding","birthday","corporate","quinceanera","graduation","recent","generateTestEventCode","codes","floor","length"],"sources":["/Users/sebamaza/Downloads/salon-fiestas-admin/src/utils/janosService.ts"],"sourcesContent":["import { EventCode } from '../types';\n\n// Simulación de base de datos de eventos\nconst mockEvents: Record<string, EventCode> = {\n  'EVT-2024-001': {\n    code: 'EVT-2024-001',\n    clientName: 'María González',\n    eventType: 'wedding',\n    eventDate: '2024-12-15',\n    eventTime: '20:00',\n    guestCount: 150,\n    venue: 'Salón Principal'\n  },\n  'EVT-2024-002': {\n    code: 'EVT-2024-002',\n    clientName: 'Carlos Rodríguez',\n    eventType: 'birthday',\n    eventDate: '2024-11-20',\n    eventTime: '19:00',\n    guestCount: 80,\n    venue: 'Salón VIP'\n  },\n  'EVT-2024-003': {\n    code: 'EVT-2024-003',\n    clientName: 'Empresa TechCorp',\n    eventType: 'corporate',\n    eventDate: '2024-12-10',\n    eventTime: '18:30',\n    guestCount: 200,\n    venue: 'Salón Corporativo'\n  },\n  'EVT-2024-004': {\n    code: 'EVT-2024-004',\n    clientName: 'Ana Martínez',\n    eventType: 'quinceanera',\n    eventDate: '2024-11-25',\n    eventTime: '21:00',\n    guestCount: 120,\n    venue: 'Salón Principal'\n  },\n  'EVT-2024-005': {\n    code: 'EVT-2024-005',\n    clientName: 'Universidad Central',\n    eventType: 'graduation',\n    eventDate: '2024-12-05',\n    eventTime: '19:30',\n    guestCount: 300,\n    venue: 'Auditorio Principal'\n  }\n};\n\nexport class JanosService {\n  /**\n   * Verifica un código de evento en el sistema de Janos\n   * @param code - Código del evento a verificar\n   * @returns Promise con la información del evento\n   */\n  static async verifyEventCode(code: string): Promise<EventCode> {\n    // Simular delay de red\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const event = mockEvents[code];\n    \n    if (!event) {\n      throw new Error('Código de evento no encontrado en el sistema');\n    }\n    \n    return event;\n  }\n\n  /**\n   * Obtiene todos los eventos disponibles (para testing)\n   * @returns Lista de códigos de eventos válidos\n   */\n  static getValidEventCodes(): string[] {\n    return Object.keys(mockEvents);\n  }\n\n  /**\n   * Simula el envío de la coordinación completada al sistema de Janos\n   * @param sessionData - Datos de la sesión de coordinación\n   * @returns Promise con confirmación\n   */\n  static async submitCoordination(sessionData: any): Promise<{ success: boolean; message: string }> {\n    // Simular delay de red\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    // Simular éxito en el 95% de los casos\n    const success = Math.random() > 0.05;\n    \n    if (success) {\n      return {\n        success: true,\n        message: 'Coordinación enviada exitosamente al sistema de Janos'\n      };\n    } else {\n      throw new Error('Error al enviar la coordinación. Inténtalo de nuevo.');\n    }\n  }\n\n  /**\n   * Obtiene estadísticas de coordinaciones por tipo de evento\n   * @returns Estadísticas simuladas\n   */\n  static async getCoordinationStats(): Promise<{\n    total: number;\n    byType: Record<string, number>;\n    recent: number;\n  }> {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    \n    return {\n      total: 156,\n      byType: {\n        wedding: 45,\n        birthday: 38,\n        corporate: 28,\n        quinceanera: 25,\n        graduation: 20\n      },\n      recent: 12 // Últimos 7 días\n    };\n  }\n}\n\n// Función helper para generar códigos de evento válidos para testing\nexport const generateTestEventCode = (): string => {\n  const codes = Object.keys(mockEvents);\n  return codes[Math.floor(Math.random() * codes.length)];\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}