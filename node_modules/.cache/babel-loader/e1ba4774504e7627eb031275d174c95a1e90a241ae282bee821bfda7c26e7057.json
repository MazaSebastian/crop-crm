{"ast":null,"code":"import { io } from 'socket.io-client';\nclass DJConnectionService {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    // URLs de conexión (configurables)\n    this.DJ_SYSTEM_URL = 'http://localhost:3000';\n    // Sistema de DJs\n    this.API_BASE_URL = 'http://localhost:3001';\n    // API del sistema técnico\n    // Callbacks para eventos\n    this.onCheckInReceived = void 0;\n    this.onReportReceived = void 0;\n    this.onChatMessageReceived = void 0;\n    this.onEventStatusChanged = void 0;\n    this.onStatsUpdated = void 0;\n    this.initializeSocket();\n  }\n  initializeSocket() {\n    try {\n      this.socket = io(this.DJ_SYSTEM_URL, {\n        transports: ['websocket', 'polling'],\n        timeout: 20000,\n        reconnection: true,\n        reconnectionAttempts: this.maxReconnectAttempts,\n        reconnectionDelay: 1000\n      });\n      this.setupSocketListeners();\n    } catch (error) {\n      console.error('Error initializing socket connection:', error);\n    }\n  }\n  setupSocketListeners() {\n    if (!this.socket) return;\n\n    // Conexión establecida\n    this.socket.on('connect', () => {\n      var _this$socket;\n      console.log('Connected to DJ system');\n      this.isConnected = true;\n      this.reconnectAttempts = 0;\n\n      // Suscribirse a eventos técnicos\n      (_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.emit('subscribe-technical-events');\n    });\n\n    // Desconexión\n    this.socket.on('disconnect', reason => {\n      console.log('Disconnected from DJ system:', reason);\n      this.isConnected = false;\n    });\n\n    // Reconexión\n    this.socket.on('reconnect', attemptNumber => {\n      console.log('Reconnected to DJ system, attempt:', attemptNumber);\n      this.isConnected = true;\n    });\n\n    // Error de conexión\n    this.socket.on('connect_error', error => {\n      console.error('Connection error:', error);\n      this.reconnectAttempts++;\n    });\n\n    // Eventos del sistema de DJs\n    this.socket.on('dj-check-in', checkIn => {\n      var _this$onCheckInReceiv;\n      console.log('DJ Check-in received:', checkIn);\n      (_this$onCheckInReceiv = this.onCheckInReceived) === null || _this$onCheckInReceiv === void 0 ? void 0 : _this$onCheckInReceiv.call(this, checkIn);\n    });\n    this.socket.on('dj-report', report => {\n      var _this$onReportReceive;\n      console.log('DJ Report received:', report);\n      (_this$onReportReceive = this.onReportReceived) === null || _this$onReportReceive === void 0 ? void 0 : _this$onReportReceive.call(this, report);\n    });\n    this.socket.on('chat-message', message => {\n      var _this$onChatMessageRe;\n      console.log('Chat message received:', message);\n      (_this$onChatMessageRe = this.onChatMessageReceived) === null || _this$onChatMessageRe === void 0 ? void 0 : _this$onChatMessageRe.call(this, message);\n    });\n    this.socket.on('event-status-change', event => {\n      var _this$onEventStatusCh;\n      console.log('Event status changed:', event);\n      (_this$onEventStatusCh = this.onEventStatusChanged) === null || _this$onEventStatusCh === void 0 ? void 0 : _this$onEventStatusCh.call(this, event);\n    });\n    this.socket.on('stats-update', stats => {\n      var _this$onStatsUpdated;\n      console.log('Stats updated:', stats);\n      (_this$onStatsUpdated = this.onStatsUpdated) === null || _this$onStatsUpdated === void 0 ? void 0 : _this$onStatsUpdated.call(this, stats);\n    });\n  }\n\n  // Métodos públicos para establecer callbacks\n  onCheckIn(callback) {\n    this.onCheckInReceived = callback;\n  }\n  onReport(callback) {\n    this.onReportReceived = callback;\n  }\n  onChatMessage(callback) {\n    this.onChatMessageReceived = callback;\n  }\n  onEventStatusChange(callback) {\n    this.onEventStatusChanged = callback;\n  }\n  onStatsUpdate(callback) {\n    this.onStatsUpdated = callback;\n  }\n\n  // Métodos para enviar datos al sistema de DJs\n  sendChatMessage(message) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('technical-chat-message', message);\n    }\n  }\n  updateCheckInStatus(checkInId, status, notes) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('update-check-in-status', {\n        checkInId,\n        status,\n        notes\n      });\n    }\n  }\n  updateReportStatus(reportId, status, assignedTechnician, resolution) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('update-report-status', {\n        reportId,\n        status,\n        assignedTechnician,\n        resolution\n      });\n    }\n  }\n  sendEquipmentAlert(equipmentId, alert) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('equipment-alert', {\n        equipmentId,\n        ...alert\n      });\n    }\n  }\n\n  // Métodos para obtener datos del sistema de DJs\n  async getActiveEvents() {\n    try {\n      const response = await fetch(`${this.DJ_SYSTEM_URL}/api/events/active`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching active events:', error);\n      return [];\n    }\n  }\n  async getPendingCheckIns() {\n    try {\n      const response = await fetch(`${this.DJ_SYSTEM_URL}/api/check-ins/pending`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching pending check-ins:', error);\n      return [];\n    }\n  }\n  async getOpenReports() {\n    try {\n      const response = await fetch(`${this.DJ_SYSTEM_URL}/api/reports/open`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching open reports:', error);\n      return [];\n    }\n  }\n  async getChatHistory(eventId) {\n    try {\n      const url = eventId ? `${this.DJ_SYSTEM_URL}/api/chat/history?eventId=${eventId}` : `${this.DJ_SYSTEM_URL}/api/chat/history`;\n      const response = await fetch(url);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching chat history:', error);\n      return [];\n    }\n  }\n  async getTechnicalStats() {\n    try {\n      const response = await fetch(`${this.DJ_SYSTEM_URL}/api/stats/technical`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching technical stats:', error);\n      return {\n        totalEquipment: 0,\n        operationalEquipment: 0,\n        maintenanceNeeded: 0,\n        criticalAlerts: 0,\n        activeEvents: 0,\n        pendingReports: 0,\n        onlineDjs: 0\n      };\n    }\n  }\n\n  // Métodos de utilidad\n  isConnectedToDJSystem() {\n    return this.isConnected;\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n    }\n  }\n  reconnect() {\n    this.disconnect();\n    this.initializeSocket();\n  }\n}\n\n// Instancia singleton\nexport const djConnectionService = new DJConnectionService();\nexport default djConnectionService;","map":{"version":3,"names":["io","DJConnectionService","constructor","socket","isConnected","reconnectAttempts","maxReconnectAttempts","DJ_SYSTEM_URL","API_BASE_URL","onCheckInReceived","onReportReceived","onChatMessageReceived","onEventStatusChanged","onStatsUpdated","initializeSocket","transports","timeout","reconnection","reconnectionAttempts","reconnectionDelay","setupSocketListeners","error","console","on","_this$socket","log","emit","reason","attemptNumber","checkIn","_this$onCheckInReceiv","call","report","_this$onReportReceive","message","_this$onChatMessageRe","event","_this$onEventStatusCh","stats","_this$onStatsUpdated","onCheckIn","callback","onReport","onChatMessage","onEventStatusChange","onStatsUpdate","sendChatMessage","updateCheckInStatus","checkInId","status","notes","updateReportStatus","reportId","assignedTechnician","resolution","sendEquipmentAlert","equipmentId","alert","getActiveEvents","response","fetch","json","getPendingCheckIns","getOpenReports","getChatHistory","eventId","url","getTechnicalStats","totalEquipment","operationalEquipment","maintenanceNeeded","criticalAlerts","activeEvents","pendingReports","onlineDjs","isConnectedToDJSystem","disconnect","reconnect","djConnectionService"],"sources":["/Users/sebamaza/Downloads/salon-fiestas-admin/src/services/djConnectionService.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\nimport { \n  DJCheckIn, \n  DJReport, \n  ChatMessage, \n  LiveEvent, \n  TechnicalStats \n} from '../types';\n\nclass DJConnectionService {\n  private socket: Socket | null = null;\n  private isConnected = false;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n\n  // URLs de conexión (configurables)\n  private DJ_SYSTEM_URL = 'http://localhost:3000'; // Sistema de DJs\n  private API_BASE_URL = 'http://localhost:3001'; // API del sistema técnico\n\n  // Callbacks para eventos\n  private onCheckInReceived?: (checkIn: DJCheckIn) => void;\n  private onReportReceived?: (report: DJReport) => void;\n  private onChatMessageReceived?: (message: ChatMessage) => void;\n  private onEventStatusChanged?: (event: LiveEvent) => void;\n  private onStatsUpdated?: (stats: TechnicalStats) => void;\n\n  constructor() {\n    this.initializeSocket();\n  }\n\n  private initializeSocket() {\n    try {\n      this.socket = io(this.DJ_SYSTEM_URL, {\n        transports: ['websocket', 'polling'],\n        timeout: 20000,\n        reconnection: true,\n        reconnectionAttempts: this.maxReconnectAttempts,\n        reconnectionDelay: 1000,\n      });\n\n      this.setupSocketListeners();\n    } catch (error) {\n      console.error('Error initializing socket connection:', error);\n    }\n  }\n\n  private setupSocketListeners() {\n    if (!this.socket) return;\n\n    // Conexión establecida\n    this.socket.on('connect', () => {\n      console.log('Connected to DJ system');\n      this.isConnected = true;\n      this.reconnectAttempts = 0;\n      \n      // Suscribirse a eventos técnicos\n      this.socket?.emit('subscribe-technical-events');\n    });\n\n    // Desconexión\n    this.socket.on('disconnect', (reason) => {\n      console.log('Disconnected from DJ system:', reason);\n      this.isConnected = false;\n    });\n\n    // Reconexión\n    this.socket.on('reconnect', (attemptNumber) => {\n      console.log('Reconnected to DJ system, attempt:', attemptNumber);\n      this.isConnected = true;\n    });\n\n    // Error de conexión\n    this.socket.on('connect_error', (error) => {\n      console.error('Connection error:', error);\n      this.reconnectAttempts++;\n    });\n\n    // Eventos del sistema de DJs\n    this.socket.on('dj-check-in', (checkIn: DJCheckIn) => {\n      console.log('DJ Check-in received:', checkIn);\n      this.onCheckInReceived?.(checkIn);\n    });\n\n    this.socket.on('dj-report', (report: DJReport) => {\n      console.log('DJ Report received:', report);\n      this.onReportReceived?.(report);\n    });\n\n    this.socket.on('chat-message', (message: ChatMessage) => {\n      console.log('Chat message received:', message);\n      this.onChatMessageReceived?.(message);\n    });\n\n    this.socket.on('event-status-change', (event: LiveEvent) => {\n      console.log('Event status changed:', event);\n      this.onEventStatusChanged?.(event);\n    });\n\n    this.socket.on('stats-update', (stats: TechnicalStats) => {\n      console.log('Stats updated:', stats);\n      this.onStatsUpdated?.(stats);\n    });\n  }\n\n  // Métodos públicos para establecer callbacks\n  public onCheckIn(callback: (checkIn: DJCheckIn) => void) {\n    this.onCheckInReceived = callback;\n  }\n\n  public onReport(callback: (report: DJReport) => void) {\n    this.onReportReceived = callback;\n  }\n\n  public onChatMessage(callback: (message: ChatMessage) => void) {\n    this.onChatMessageReceived = callback;\n  }\n\n  public onEventStatusChange(callback: (event: LiveEvent) => void) {\n    this.onEventStatusChanged = callback;\n  }\n\n  public onStatsUpdate(callback: (stats: TechnicalStats) => void) {\n    this.onStatsUpdated = callback;\n  }\n\n  // Métodos para enviar datos al sistema de DJs\n  public sendChatMessage(message: Omit<ChatMessage, 'id' | 'timestamp'>) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('technical-chat-message', message);\n    }\n  }\n\n  public updateCheckInStatus(checkInId: number, status: 'reviewed' | 'resolved', notes?: string) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('update-check-in-status', { checkInId, status, notes });\n    }\n  }\n\n  public updateReportStatus(reportId: number, status: 'in-progress' | 'resolved', assignedTechnician?: string, resolution?: string) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('update-report-status', { \n        reportId, \n        status, \n        assignedTechnician, \n        resolution \n      });\n    }\n  }\n\n  public sendEquipmentAlert(equipmentId: number, alert: { title: string; description: string; type: 'error' | 'warning' | 'info' }) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('equipment-alert', { equipmentId, ...alert });\n    }\n  }\n\n  // Métodos para obtener datos del sistema de DJs\n  public async getActiveEvents(): Promise<LiveEvent[]> {\n    try {\n      const response = await fetch(`${this.DJ_SYSTEM_URL}/api/events/active`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching active events:', error);\n      return [];\n    }\n  }\n\n  public async getPendingCheckIns(): Promise<DJCheckIn[]> {\n    try {\n      const response = await fetch(`${this.DJ_SYSTEM_URL}/api/check-ins/pending`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching pending check-ins:', error);\n      return [];\n    }\n  }\n\n  public async getOpenReports(): Promise<DJReport[]> {\n    try {\n      const response = await fetch(`${this.DJ_SYSTEM_URL}/api/reports/open`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching open reports:', error);\n      return [];\n    }\n  }\n\n  public async getChatHistory(eventId?: string): Promise<ChatMessage[]> {\n    try {\n      const url = eventId \n        ? `${this.DJ_SYSTEM_URL}/api/chat/history?eventId=${eventId}`\n        : `${this.DJ_SYSTEM_URL}/api/chat/history`;\n      const response = await fetch(url);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching chat history:', error);\n      return [];\n    }\n  }\n\n  public async getTechnicalStats(): Promise<TechnicalStats> {\n    try {\n      const response = await fetch(`${this.DJ_SYSTEM_URL}/api/stats/technical`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching technical stats:', error);\n      return {\n        totalEquipment: 0,\n        operationalEquipment: 0,\n        maintenanceNeeded: 0,\n        criticalAlerts: 0,\n        activeEvents: 0,\n        pendingReports: 0,\n        onlineDjs: 0\n      };\n    }\n  }\n\n  // Métodos de utilidad\n  public isConnectedToDJSystem(): boolean {\n    return this.isConnected;\n  }\n\n  public disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n    }\n  }\n\n  public reconnect() {\n    this.disconnect();\n    this.initializeSocket();\n  }\n}\n\n// Instancia singleton\nexport const djConnectionService = new DJConnectionService();\nexport default djConnectionService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}