{"ast":null,"code":"var _jsxFileName = \"/Users/sebamaza/Downloads/salon-fiestas-admin/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Datos de ejemplo para simular usuarios\nconst mockUsers = [{\n  id: '1',\n  email: 'admin@salon.com',\n  name: 'Administrador',\n  role: 'admin',\n  avatar: 'https://via.placeholder.com/40'\n}, {\n  id: '2',\n  email: 'dj@salon.com',\n  name: 'DJ Carlos',\n  role: 'dj',\n  avatar: 'https://via.placeholder.com/40'\n}, {\n  id: '3',\n  email: 'tecnico@salon.com',\n  name: 'Técnico Juan',\n  role: 'technician',\n  avatar: 'https://via.placeholder.com/40'\n}];\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // Verificar si hay un usuario guardado en localStorage\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setUser(JSON.parse(savedUser));\n    }\n    setIsLoading(false);\n  }, []);\n  const login = async credentials => {\n    setIsLoading(true);\n\n    // Simular delay de red\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Buscar usuario en los datos mock\n    const foundUser = mockUsers.find(u => u.email === credentials.email);\n    if (foundUser && credentials.password === '123456') {\n      // Contraseña simple para demo\n      setUser(foundUser);\n      localStorage.setItem('user', JSON.stringify(foundUser));\n      setIsLoading(false);\n      return true;\n    }\n    setIsLoading(false);\n    return false;\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    isLoading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"YajQB7LURzRD+QP5gw0+K2TZIWA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","mockUsers","id","email","name","role","avatar","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","isLoading","setIsLoading","savedUser","localStorage","getItem","JSON","parse","login","credentials","Promise","resolve","setTimeout","foundUser","find","u","password","setItem","stringify","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sebamaza/Downloads/salon-fiestas-admin/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { User, LoginCredentials, AuthContextType } from '../types';\r\n\r\n// Datos de ejemplo para simular usuarios\r\nconst mockUsers: User[] = [\r\n  {\r\n    id: '1',\r\n    email: 'admin@salon.com',\r\n    name: 'Administrador',\r\n    role: 'admin',\r\n    avatar: 'https://via.placeholder.com/40'\r\n  },\r\n  {\r\n    id: '2',\r\n    email: 'dj@salon.com',\r\n    name: 'DJ Carlos',\r\n    role: 'dj',\r\n    avatar: 'https://via.placeholder.com/40'\r\n  },\r\n  {\r\n    id: '3',\r\n    email: 'tecnico@salon.com',\r\n    name: 'Técnico Juan',\r\n    role: 'technician',\r\n    avatar: 'https://via.placeholder.com/40'\r\n  }\r\n];\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Verificar si hay un usuario guardado en localStorage\r\n    const savedUser = localStorage.getItem('user');\r\n    if (savedUser) {\r\n      setUser(JSON.parse(savedUser));\r\n    }\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  const login = async (credentials: LoginCredentials): Promise<boolean> => {\r\n    setIsLoading(true);\r\n    \r\n    // Simular delay de red\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    // Buscar usuario en los datos mock\r\n    const foundUser = mockUsers.find(u => u.email === credentials.email);\r\n    \r\n    if (foundUser && credentials.password === '123456') { // Contraseña simple para demo\r\n      setUser(foundUser);\r\n      localStorage.setItem('user', JSON.stringify(foundUser));\r\n      setIsLoading(false);\r\n      return true;\r\n    }\r\n    \r\n    setIsLoading(false);\r\n    return false;\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    login,\r\n    logout,\r\n    isLoading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}