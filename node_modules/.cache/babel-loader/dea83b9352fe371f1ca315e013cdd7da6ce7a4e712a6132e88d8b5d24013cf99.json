{"ast":null,"code":"class SimpleConnectionService {\n  constructor() {\n    this.isConnected = false;\n    // Simular conexión para pruebas\n    this.isConnected = true;\n  }\n\n  // Métodos públicos para establecer callbacks\n  onCheckIn(callback) {\n    // Simulado para pruebas\n  }\n  onReport(callback) {\n    // Simulado para pruebas\n  }\n  onChatMessage(callback) {\n    // Simulado para pruebas\n  }\n  onEventStatusChange(callback) {\n    // Simulado para pruebas\n  }\n  onStatsUpdate(callback) {\n    // Simulado para pruebas\n  }\n\n  // Métodos para enviar datos al sistema de DJs\n  sendChatMessage(message) {\n    console.log('Mensaje enviado (simulado):', message);\n  }\n  updateCheckInStatus(checkInId, status, notes) {\n    console.log('Estado de check-in actualizado (simulado):', {\n      checkInId,\n      status,\n      notes\n    });\n  }\n  updateReportStatus(reportId, status, assignedTechnician, resolution) {\n    console.log('Estado de reporte actualizado (simulado):', {\n      reportId,\n      status,\n      assignedTechnician,\n      resolution\n    });\n  }\n  sendEquipmentAlert(equipmentId, alert) {\n    console.log('Alerta de equipamiento enviada (simulado):', {\n      equipmentId,\n      ...alert\n    });\n  }\n\n  // Métodos para obtener datos del sistema de DJs\n  async getActiveEvents() {\n    // Retornar datos simulados\n    return [];\n  }\n  async getPendingCheckIns() {\n    // Retornar datos simulados\n    return [];\n  }\n  async getOpenReports() {\n    // Retornar datos simulados\n    return [];\n  }\n  async getChatHistory(eventId) {\n    // Retornar datos simulados\n    return [];\n  }\n  async getTechnicalStats() {\n    // Retornar datos simulados\n    return {\n      totalEquipment: 0,\n      operationalEquipment: 0,\n      maintenanceNeeded: 0,\n      criticalAlerts: 0,\n      activeEvents: 0,\n      pendingReports: 0,\n      onlineDjs: 0\n    };\n  }\n\n  // Métodos de utilidad\n  isConnectedToDJSystem() {\n    return this.isConnected;\n  }\n  disconnect() {\n    this.isConnected = false;\n  }\n  reconnect() {\n    this.isConnected = true;\n  }\n}\n\n// Instancia singleton\nexport const simpleConnectionService = new SimpleConnectionService();\nexport default simpleConnectionService;","map":{"version":3,"names":["SimpleConnectionService","constructor","isConnected","onCheckIn","callback","onReport","onChatMessage","onEventStatusChange","onStatsUpdate","sendChatMessage","message","console","log","updateCheckInStatus","checkInId","status","notes","updateReportStatus","reportId","assignedTechnician","resolution","sendEquipmentAlert","equipmentId","alert","getActiveEvents","getPendingCheckIns","getOpenReports","getChatHistory","eventId","getTechnicalStats","totalEquipment","operationalEquipment","maintenanceNeeded","criticalAlerts","activeEvents","pendingReports","onlineDjs","isConnectedToDJSystem","disconnect","reconnect","simpleConnectionService"],"sources":["/Users/sebamaza/Downloads/salon-fiestas-admin/src/services/simpleConnectionService.ts"],"sourcesContent":["import { \n  DJCheckIn, \n  DJReport, \n  ChatMessage, \n  LiveEvent, \n  TechnicalStats \n} from '../types';\n\nclass SimpleConnectionService {\n  private isConnected = false;\n\n  constructor() {\n    // Simular conexión para pruebas\n    this.isConnected = true;\n  }\n\n  // Métodos públicos para establecer callbacks\n  public onCheckIn(callback: (checkIn: DJCheckIn) => void) {\n    // Simulado para pruebas\n  }\n\n  public onReport(callback: (report: DJReport) => void) {\n    // Simulado para pruebas\n  }\n\n  public onChatMessage(callback: (message: ChatMessage) => void) {\n    // Simulado para pruebas\n  }\n\n  public onEventStatusChange(callback: (event: LiveEvent) => void) {\n    // Simulado para pruebas\n  }\n\n  public onStatsUpdate(callback: (stats: TechnicalStats) => void) {\n    // Simulado para pruebas\n  }\n\n  // Métodos para enviar datos al sistema de DJs\n  public sendChatMessage(message: Omit<ChatMessage, 'id' | 'timestamp'>) {\n    console.log('Mensaje enviado (simulado):', message);\n  }\n\n  public updateCheckInStatus(checkInId: number, status: 'reviewed' | 'resolved', notes?: string) {\n    console.log('Estado de check-in actualizado (simulado):', { checkInId, status, notes });\n  }\n\n  public updateReportStatus(reportId: number, status: 'in-progress' | 'resolved', assignedTechnician?: string, resolution?: string) {\n    console.log('Estado de reporte actualizado (simulado):', { reportId, status, assignedTechnician, resolution });\n  }\n\n  public sendEquipmentAlert(equipmentId: number, alert: { title: string; description: string; type: 'error' | 'warning' | 'info' }) {\n    console.log('Alerta de equipamiento enviada (simulado):', { equipmentId, ...alert });\n  }\n\n  // Métodos para obtener datos del sistema de DJs\n  public async getActiveEvents(): Promise<LiveEvent[]> {\n    // Retornar datos simulados\n    return [];\n  }\n\n  public async getPendingCheckIns(): Promise<DJCheckIn[]> {\n    // Retornar datos simulados\n    return [];\n  }\n\n  public async getOpenReports(): Promise<DJReport[]> {\n    // Retornar datos simulados\n    return [];\n  }\n\n  public async getChatHistory(eventId?: string): Promise<ChatMessage[]> {\n    // Retornar datos simulados\n    return [];\n  }\n\n  public async getTechnicalStats(): Promise<TechnicalStats> {\n    // Retornar datos simulados\n    return {\n      totalEquipment: 0,\n      operationalEquipment: 0,\n      maintenanceNeeded: 0,\n      criticalAlerts: 0,\n      activeEvents: 0,\n      pendingReports: 0,\n      onlineDjs: 0\n    };\n  }\n\n  // Métodos de utilidad\n  public isConnectedToDJSystem(): boolean {\n    return this.isConnected;\n  }\n\n  public disconnect() {\n    this.isConnected = false;\n  }\n\n  public reconnect() {\n    this.isConnected = true;\n  }\n}\n\n// Instancia singleton\nexport const simpleConnectionService = new SimpleConnectionService();\nexport default simpleConnectionService;\n"],"mappings":"AAQA,MAAMA,uBAAuB,CAAC;EAG5BC,WAAWA,CAAA,EAAG;IAAA,KAFNC,WAAW,GAAG,KAAK;IAGzB;IACA,IAAI,CAACA,WAAW,GAAG,IAAI;EACzB;;EAEA;EACOC,SAASA,CAACC,QAAsC,EAAE;IACvD;EAAA;EAGKC,QAAQA,CAACD,QAAoC,EAAE;IACpD;EAAA;EAGKE,aAAaA,CAACF,QAAwC,EAAE;IAC7D;EAAA;EAGKG,mBAAmBA,CAACH,QAAoC,EAAE;IAC/D;EAAA;EAGKI,aAAaA,CAACJ,QAAyC,EAAE;IAC9D;EAAA;;EAGF;EACOK,eAAeA,CAACC,OAA8C,EAAE;IACrEC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEF,OAAO,CAAC;EACrD;EAEOG,mBAAmBA,CAACC,SAAiB,EAAEC,MAA+B,EAAEC,KAAc,EAAE;IAC7FL,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAE;MAAEE,SAAS;MAAEC,MAAM;MAAEC;IAAM,CAAC,CAAC;EACzF;EAEOC,kBAAkBA,CAACC,QAAgB,EAAEH,MAAkC,EAAEI,kBAA2B,EAAEC,UAAmB,EAAE;IAChIT,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAE;MAAEM,QAAQ;MAAEH,MAAM;MAAEI,kBAAkB;MAAEC;IAAW,CAAC,CAAC;EAChH;EAEOC,kBAAkBA,CAACC,WAAmB,EAAEC,KAAiF,EAAE;IAChIZ,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAE;MAAEU,WAAW;MAAE,GAAGC;IAAM,CAAC,CAAC;EACtF;;EAEA;EACA,MAAaC,eAAeA,CAAA,EAAyB;IACnD;IACA,OAAO,EAAE;EACX;EAEA,MAAaC,kBAAkBA,CAAA,EAAyB;IACtD;IACA,OAAO,EAAE;EACX;EAEA,MAAaC,cAAcA,CAAA,EAAwB;IACjD;IACA,OAAO,EAAE;EACX;EAEA,MAAaC,cAAcA,CAACC,OAAgB,EAA0B;IACpE;IACA,OAAO,EAAE;EACX;EAEA,MAAaC,iBAAiBA,CAAA,EAA4B;IACxD;IACA,OAAO;MACLC,cAAc,EAAE,CAAC;MACjBC,oBAAoB,EAAE,CAAC;MACvBC,iBAAiB,EAAE,CAAC;MACpBC,cAAc,EAAE,CAAC;MACjBC,YAAY,EAAE,CAAC;MACfC,cAAc,EAAE,CAAC;MACjBC,SAAS,EAAE;IACb,CAAC;EACH;;EAEA;EACOC,qBAAqBA,CAAA,EAAY;IACtC,OAAO,IAAI,CAACnC,WAAW;EACzB;EAEOoC,UAAUA,CAAA,EAAG;IAClB,IAAI,CAACpC,WAAW,GAAG,KAAK;EAC1B;EAEOqC,SAASA,CAAA,EAAG;IACjB,IAAI,CAACrC,WAAW,GAAG,IAAI;EACzB;AACF;;AAEA;AACA,OAAO,MAAMsC,uBAAuB,GAAG,IAAIxC,uBAAuB,CAAC,CAAC;AACpE,eAAewC,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}